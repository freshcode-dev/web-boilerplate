image: node:18-alpine

stages:
  - lint-test-build
  - deployment

variables:
  REGISTRY: git.freshcode.org:4567/pradev/boilerplate-v2
  BRANCH_IMAGE: $REGISTRY:$CI_COMMIT_REF_SLUG
  PNPM_INSTALL_COMMAND: pnpm install --store-dir .pnpm-store
  POSTGRES_DB: testing
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST_AUTH_METHOD: trust
  REDIS_PASSWORD: Owc1J4cy3DS0TWn0Afed
  # Example: web-1.0.0, web-1.0.0-staging-1
  WEB_GENERAL_TAG_REGEX: /^web-(\d+[\.]?).*$/
  # Example: web-1.0.0, web-1.10.123
  WEB_PROD_TAG_REGEX: /^web-(\d+[\.]?)+$/
  # Example: web-1.0.0-staging, web-1.0.0-staging-1
  WEB_STAGING_TAG_REGEX: /^web-(\d+[\.]?)+(-staging)(-[\d])?$/
  # Example: release-1, release-initial
  RELEASE_BRANCH_REGEX: /^release-.*$/

web-lint-test-build:
  stage: lint-test-build
  services:
    - name: bitnami/redis:latest
      alias: redis
    - name: postgres:latest
      alias: postgres
  interruptible: true
  variables:
    NX_DATABASE_HOST: postgres
    NX_TEST_DATABASE_NAME: $POSTGRES_DB
  script:
    - npm install -g pnpm
    - $PNPM_INSTALL_COMMAND
    - pnpm nx run-many --all --target=lint --configuration=ci
#    - pnpm nx run-many --all --target=test
    - pnpm run merge-test-reports
    - pnpm nx run-many --all --target=build
  artifacts:
    when: always
    paths:
      - dist
      - __reports__
    reports:
      junit: __reports__/merged.xml
      codequality: __lint__/api.json
  only:
    - merge_requests
    - main
    - $WEB_GENERAL_TAG_REGEX
    - $RELEASE_BRANCH_REGEX

.web-deployment-job:
  image: docker:stable
  stage: deployment
  interruptible: true
  dependencies:
    - web-lint-test-build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $BRANCH_IMAGE -f ./misc/Dockerfile .
    - docker push $BRANCH_IMAGE

# Deploy production START
# Runs when $WEB_PROD_TAG_REGEX matching tag is created

web-deploy-prod:
  extends: .web-deployment-job
  environment:
    name: main
  only:
    - $WEB_PROD_TAG_REGEX

web-create-release-main:
  stage: deployment
  interruptible: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - web-deploy-prod
  script:
    - echo 'Release creation...'
  release:
    name: '[WEB][PROD] Release $CI_COMMIT_TAG'
    description: 'Created automatically as a result of manual tag creation'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  only:
    - $WEB_PROD_TAG_REGEX

# Deploy production END
#-------------------------------------------------------
# Deploy Staging START
# Runs when $WEB_STAGING_TAG_REGEX matching tag is created

web-deploy-staging:
  extends: .web-deployment-job
  environment:
    name: staging
  only:
    - $WEB_STAGING_TAG_REGEX

web-create-release-staging:
  stage: deployment
  interruptible: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - web-deploy-staging
  script:
    - echo 'Release creation...'
  release:
    name: '[WEB][STAGING] Release $CI_COMMIT_TAG'
    description: 'Created automatically as a result of manual tag creation'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  only:
    - $WEB_STAGING_TAG_REGEX

# Deploy Staging END
#-------------------------------------------------------
# Deploy Staging START
# Runs when $WEB_STAGING_TAG_REGEX matching tag is created

web-deploy-dev:
  extends: .web-deployment-job
  only:
    - main
# Deploy Staging END
