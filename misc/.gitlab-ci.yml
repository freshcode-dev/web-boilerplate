image: node:18-alpine

stages:
  - lint-test-build
  - deployment

before_script:
  - npm install -g pnpm@7.27.0
  - pnpm config set store-dir .pnpm-store
  - pnpm install
  - pnpm store path

variables:
  NX_APP_NAME: boilerplate
  POSTGRES_DB: testing
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST_AUTH_METHOD: trust
  REDIS_PASSWORD: Owc1J4cy3DS0TWn0Afed
  # Example: web-1.0.0, web-1.0.0-staging-1
  WEB_GENERAL_TAG_REGEX: /^web-(\d+[\.]?).*$/
  # Example: web-1.0.0, web-1.10.123
  WEB_PROD_TAG_REGEX: /^web-(\d+[\.]?)+$/
  # Example: web-1.0.0-staging, web-1.0.0-staging-1
  WEB_STAGING_TAG_REGEX: /^web-(\d+[\.]?)+(-staging)(-[\d])?$/
  # Example: release-1, release-initial
  RELEASE_BRANCH_REGEX: /^release-.*$/

.dependencies_cache:
  cache: &cache
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .pnpm-store
    policy: pull-push

web-lint-test-build:
  stage: lint-test-build
  extends: .dependencies_cache
  services:
    - name: bitnami/redis:latest
      alias: redis
    - name: postgres:latest
      alias: postgres
  interruptible: true
  variables:
    NX_DATABASE_HOST: postgres
    NX_TEST_DATABASE_NAME: $POSTGRES_DB
  script:
    - pnpm nx run-many --all --target=lint
#    - pnpm nx run-many --all --target=lint --configuration=ci
#    - pnpm nx run-many --all --target=test
#    - pnpm run merge-test-reports
    - pnpm nx run-many --all --target=build
  artifacts:
    when: always
    paths:
      - dist
#      - __reports__
#    reports:
#      junit: __reports__/merged.xml
#      codequality: __lint__/api.json
  only:
    - merge_requests
    - main
    - $WEB_GENERAL_TAG_REGEX
    - $RELEASE_BRANCH_REGEX

#-------------------------------------------------------
# Define base deployment job START

.web-deployment-job:
  stage: deployment
  interruptible: true
  dependencies:
    - web-lint-test-build
  extends: .dependencies_cache
  script:
    #   Install AWS CDK
    - apk add --no-cache python3 py3-pip jq nodejs docker openrc && pip3 install --upgrade pip && pip3 install awscli
    - rc-update add docker boot
    #   Configure AWS CDK
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    #   Deploy ECR stack and write outputs to file
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-ecr-stack --outputs-file /cdk-outputs.json
    - ECR_REPO_URL=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\"".ecrRepoUrl" /cdk-outputs.json)
    - ECR_REPO_NAME=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\"".ecrRepoName" /cdk-outputs.json)
    #   Login to ecr registry
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL
    #   Build and push image
    - docker build -t $ECR_REPO_NAME --cache-from=$ECR_REPO_URL:latest -f ./misc/Dockerfile .
    - docker tag $ECR_REPO_NAME:latest $ECR_REPO_URL:latest
    - docker push $ECR_REPO_URL:latest
    #   Deploy vpc and main stacks
    - NX_APP_IMAGE_ECR_REPO_NAME=$ECR_REPO_NAME
    - echo $NX_APP_IMAGE_ECR_REPO_NAME
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-vpc-stack $CDK_STACK_PREFIX-stack --outputs-file /cdk-outputs.json

# Define base deployment job END
#-------------------------------------------------------
# Deploy production START
# Runs when $WEB_PROD_TAG_REGEX matching tag is created

web-deploy-prod:
  extends: .web-deployment-job
  environment:
    name: main
  only:
    - $WEB_PROD_TAG_REGEX

web-create-release-prod:
  stage: deployment
  interruptible: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - web-deploy-prod
  script:
    - echo 'Release creation...'
  release:
    name: '[WEB][PROD] Release $CI_COMMIT_TAG'
    description: 'Created automatically as a result of manual tag creation'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  only:
    - $WEB_PROD_TAG_REGEX

# Deploy production END
#-------------------------------------------------------
# Deploy Dev START
# Runs when $WEB_STAGING_TAG_REGEX matching tag is created

web-deploy-dev:
  extends: .web-deployment-job
  variables:
    NX_CDK_STAGE: dev
    CDK_STACK_PREFIX: $NX_APP_NAME-$NX_CDK_STAGE
  only:
    - main
  script:
#   Install AWS CDK
    - apk add --no-cache python3 py3-pip jq nodejs docker openrc && pip3 install --upgrade pip && pip3 install awscli
    - rc-update add docker boot
#   Configure AWS CDK
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
#   Deploy ECR stack and write outputs to file
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-ecr-stack --outputs-file /cdk-outputs.json
    - ECR_REPO_URL=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\"".ecrRepoUrl" /cdk-outputs.json)
    - ECR_REPO_NAME=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\"".ecrRepoName" /cdk-outputs.json)
#   Login to ecr registry
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL
#   Build and push image
    - docker build -t $ECR_REPO_NAME --cache-from=$ECR_REPO_URL:latest -f ./misc/Dockerfile .
    - docker tag $ECR_REPO_NAME:latest $ECR_REPO_URL:latest
    - docker push $ECR_REPO_URL:latest
#   Deploy vpc and main stacks
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-vpc-stack $CDK_STACK_PREFIX-stack --outputs-file /cdk-outputs.json
# Deploy Dev END
