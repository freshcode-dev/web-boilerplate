image: node:18-alpine3.16

stages:
  - lint-test-build
  - deployment

before_script:
  - npm install -g pnpm@7.27.0
  - pnpm config set store-dir .pnpm-store
  - pnpm install
  - pnpm store path

variables:
  NX_CDK_APP_NAME: boilerplate
  # Example: web-1.0.0, web-1.0.0-staging-1
  WEB_GENERAL_TAG_REGEX: /^web-(\d+[\.]?).*$/
  # Example: web-1.0.0, web-1.10.123
  WEB_PROD_TAG_REGEX: /^web-(\d+[\.]?)+$/
  # Example: web-1.0.0-staging, web-1.0.0-staging-1
  WEB_STAGING_TAG_REGEX: /^web-(\d+[\.]?)+(-staging)(-[\d]+)?$/
  # Example: release-1, release-initial
  RELEASE_BRANCH_REGEX: /^release-.*$/

.dependencies_cache:
  cache: &cache
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .pnpm-store
    policy: pull-push

web-lint-test-build:
  stage: lint-test-build
  extends: .dependencies_cache
  interruptible: true
  script:
    - pnpm nx run-many --all --target=lint
#    - pnpm nx run-many --all --target=lint --configuration=ci
    #    - pnpm nx run-many --all --target=test
    #    - pnpm run merge-test-reports
    - pnpm nx run-many --all --target=build --configuration=production
  artifacts:
    when: always
    paths:
      - dist
  #      - __reports__
  #    reports:
  #      junit: __reports__/merged.xml
  #      codequality: __lint__/api.json
  only:
    - merge_requests
    - main
    - /^web-(\d+[\.]?).*$/
    - $RELEASE_BRANCH_REGEX

#-------------------------------------------------------
# Define base deployment job START

.web-deployment-job:
  stage: deployment
  dependencies:
    - web-lint-test-build
  extends: .dependencies_cache
  script:
#   ðŸ‘‡ Pass CI environment variables
    - export NX_CDK_DEPLOYMENT_REPOSITORY_URL=$CI_PROJECT_URL
#   ðŸ‘‡ Install all the AWS CLI dependencies and set credentials
    - apk add --no-cache jq docker openrc aws-cli
    - rc-update add docker boot
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
#   ðŸ‘‡ Deploy ECR stack and parse outputs to variables
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-ecr-stack --outputs-file /cdk-outputs.json
    - CDK_STACK_PREFIX_TRIM="${CDK_STACK_PREFIX//-/}"
    - echo $CDK_STACK_PREFIX_TRIM
    - echo $CDK_STACK_PREFIX
    - ECR_REPO_URL=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\""."\""${CDK_STACK_PREFIX_TRIM}ecrRepoUrl"\""" /cdk-outputs.json)
    - ECR_REPO_NAME=$(jq -r "."\""${CDK_STACK_PREFIX}-ecr-stack"\""."\""${CDK_STACK_PREFIX_TRIM}ecrRepoName"\""" /cdk-outputs.json)
    #   Login to ecr registry
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL
#   ðŸ‘‡ Build and push docker image to ECR registry
    - docker build -t $ECR_REPO_NAME --cache-from=$ECR_REPO_URL:latest -f ./misc/Dockerfile .
    - docker tag $ECR_REPO_NAME:latest $ECR_REPO_URL:latest
    - docker tag $ECR_REPO_NAME:latest $ECR_REPO_URL:$CI_COMMIT_SHORT_SHA
    - docker push $ECR_REPO_URL:latest
    - docker push $ECR_REPO_URL:$CI_COMMIT_SHORT_SHA
#   This command updates task definition to refer the latest commit hash and initiates the deployment process.
#   If deployment fails, the environment rolls back to previous image version, as well as any infrastructure changes
    - export NX_APP_IMAGE_ECR_REPO_NAME=$ECR_REPO_NAME
    - export NX_CDK_DOCKER_IMAGE_TAG=$CI_COMMIT_SHORT_SHA
    - echo $NX_APP_IMAGE_ECR_REPO_NAME
    - echo $NX_CDK_DOCKER_IMAGE_TAG
    - pnpm nx deploy infrastructure-cdk $CDK_STACK_PREFIX-stack
#   Commented as now we update task definition with the exact commit version hash on every deployment
#    - ECS_CLUSTER_NAME=$(jq -r "."\""${CDK_STACK_PREFIX}-stack"\""."\""${CDK_STACK_PREFIX_TRIM}ecsClusterName"\""" /cdk-outputs.json)
#    - ECS_SERVICE_NAME=$(jq -r "."\""${CDK_STACK_PREFIX}-stack"\""."\""${CDK_STACK_PREFIX_TRIM}ecsServiceName"\""" /cdk-outputs.json)
#    - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
#    - aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME

.create-release-job:
  stage: deployment
  interruptible: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - echo 'Release is about to be created...'

# Define base deployment job END
#-------------------------------------------------------
# Deploy Dev START
# Runs on any update to main branch

web-deploy-dev:
  extends: .web-deployment-job
  environment:
    name: dev
    url: https://boilerplate.freshcode.org/
    deployment_tier: development
  variables:
    NX_CDK_STAGE: dev
    CDK_STACK_PREFIX: $NX_CDK_APP_NAME-$NX_CDK_STAGE
  only:
    - main

# Deploy Dev END
#-------------------------------------------------------
# Deploy staging START
# Runs when $WEB_STAGING_TAG_REGEX matching tag is created

web-deploy-staging:
  extends: .web-deployment-job
  environment:
    name: staging
    url: https://staging.barvainvest.com/
    deployment_tier: staging
  variables:
    NX_CDK_STAGE: staging
    CDK_STACK_PREFIX: $NX_CDK_APP_NAME-$NX_CDK_STAGE
  only:
    - /^web-(\d+[\.]?)+(-staging)(-[\d]+)?$/

web-create-release-staging:
  extends: .create-release-job
  dependencies:
    - web-deploy-staging
  release:
    name: '[WEB][STAGING] Release $CI_COMMIT_TAG'
    description: 'Created automatically as a result of manual tag creation'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  script:
    - echo 'Release creation...'
  only:
    - /^web-(\d+[\.]?)+(-staging)(-[\d]+)?$/

# Deploy production END
#-------------------------------------------------------
# Deploy production START
# Runs when $WEB_PROD_TAG_REGEX matching tag is created

web-deploy-prod:
  extends: .web-deployment-job
  environment:
    name: main
  only:
    - $WEB_PROD_TAG_REGEX

web-create-release-prod:
  extends: .create-release-job
  dependencies:
    - web-deploy-prod
  release:
    name: '[WEB][PROD] Release $CI_COMMIT_TAG'
    description: 'Created automatically as a result of manual tag creation'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  script:
    - echo 'Release creation...'
  only:
    refs:
      - $WEB_STAGING_TAG_REGEX

# Deploy production END
#-------------------------------------------------------
